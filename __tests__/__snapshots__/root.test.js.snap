// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`GET / > should return 200 OK and valid root response 1`] = `
{
  "description": "Local development server - Vercel uses serverless functions",
  "endpoints": {
    "GET /glucose": "Get last glucose reading",
    "GET /graph": "Get glucose readings for the last x hours (default 2 hours)",
    "GET /health": "Service health check",
  },
  "name": "SugarSugar API (Local Development)",
  "note": "This server is for local development only. Vercel deployment uses health.js and glucose.js",
  "version": "1.0.0",
}
`;

exports[`UI public/index.html > should return 200 OK and render the landing page 1`] = `
"<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SugarSugar API</title>
    <script src="/circle-trendicator.js" type="module"></script>
    <script>
      window.BENCHMARKS = { LOW: 60, HIGH: 240 };
    </script>
    <style>
      body {
        font-family:
          -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        max-width: 800px;
        margin: 50px auto;
        padding: 20px;
        line-height: 1.6;
        background: #f8f9fa;
      }

      .container {
        background: #fff;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }

      h1 {
        color: #333;
        border-bottom: 3px solid #007acc;
        padding-bottom: 10px;
      }

      h2 {
        color: #555;
        margin-top: 30px;
      }

      .endpoint {
        background: #f1f3f4;
        padding: 15px;
        border-radius: 5px;
        margin: 10px 0;
        border-left: 4px solid #007acc;
        cursor: pointer;
      }

      .endpoint code {
        color: #007acc;
        background: #e8f4f8;
        padding: 2px 6px;
        border-radius: 3px;
        font-family: Monaco, Consolas, monospace;
      }

      a {
        color: #007acc;
        text-decoration: none;
      }
      a:hover {
        text-decoration: underline;
      }

      .status {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.9em;
        font-weight: bold;
      }
      .status.live {
        background: #d4edda;
        color: #155724;
      }

      .footer {
        margin-top: 40px;
        padding-top: 20px;
        border-top: 1px solid #eee;
        text-align: center;
        color: #666;
      }

      .glucose-container {
        font-family: system-ui;
      }
    </style>
  </head>

  <body>
    <main class="container">
      <header>
        <h1 aria-label="SugarSugar API">üç≠ SugarSugar API</h1>
        <p>
          <strong
            >A webservice to ask Dexcom Share servers for blood glucose
            data</strong
          >
        </p>
        <p>
          <span class="status live" aria-label="Live">LIVE</span> API Version
          1.0.0
        </p>
      </header>

      <section>
        <h2>üìä API Endpoints</h2>

        <div class="endpoint" onclick="window.open('/glucose','_blank')">
          <strong>GET <code>/glucose</code></strong
          ><br />
          Latest glucose reading in a simple format
        </div>

        <div class="endpoint" onclick="window.open('/graph','_blank')">
          <strong>GET <code>/graph</code></strong
          ><br />
          List of all glucose readings for the last 2 hours (default)
        </div>

        <div
          class="endpoint"
          onclick="window.open('/graph?hours=5.5','_blank')"
        >
          <strong>GET <code>/graph?hours=5.5</code></strong
          ><br />
          Get up to an entire day of glucose readings by adding the query
          parameter <code>hours</code> and setting it equal to how many hours of
          data you want (0.1 - 24.0)
        </div>

        <div class="endpoint" onclick="window.open('/health','_blank')">
          <strong>GET <code>/health</code></strong
          ><br />
          Service health check and status
        </div>
      </section>

      <section>
        <h2>üìä Native Web Component</h2>
        <div id="output_glucose_indicator" class="glucose-container"></div>
        <h2>
          <a href="/cgm.html" target="_blank">Code examples for a CGM viewer</a>
        </h2>
        <h2>
          <a href="/alexa.html" target="_blank"
            >Code example for an Amazon Echo viewer</a
          >
        </h2>
      </section>

      <section>
        <h2>‚åó API Responses</h2>

        <h3>/glucose</h3>
        <div id="output_glucose_json"></div>

        <h3>/graph</h3>
        <div id="output_graph_json"></div>

        <h3>/health</h3>
        <div id="output_health_json"></div>
      </section>

      <section>
        <h2>üìñ Documentation</h2>
        <p>
          For complete setup instructions and API documentation, visit the
          <a href="https://github.com/run-time/sugarsugar" target="_blank"
            >GitHub repository</a
          >.
        </p>
      </section>

      <footer class="footer">
        <p>Made with ‚ù§Ô∏è by Dave Alger | Powered by Dexcom Share API</p>
        <p>
          <small
            >Disclaimer: This project is not affiliated with Dexcom, Inc.</small
          >
        </p>
      </footer>
    </main>

    <script>
      async function fetchHealth() {
        try {
          const response = await fetch('/health');
          if (!response.ok) throw new Error('Network response was not ok');
          const data = await response.json();
          document.getElementById('output_health_json').innerHTML =
            \`<pre>\${JSON.stringify(data, null, 2)}</pre>\`;
        } catch (error) {
          document.getElementById('output_health_json').innerHTML =
            \`<p>Error: \${error.message}</p>\`;
        }
      }
      fetchHealth();

      async function fetchGraph() {
        try {
          const response = await fetch('/graph');
          if (!response.ok) throw new Error('Network response was not ok');
          const data = await response.json();
          document.getElementById('output_graph_json').innerHTML =
            \`<pre>\${JSON.stringify(data, null, 2)}</pre>\`;
        } catch (error) {
          document.getElementById('output_graph_json').innerHTML =
            \`<p>Error: \${error.message}</p>\`;
        }
      }
      fetchGraph();
    </script>

    <script type="module">
      import { getCGMTrendicator } from './circle-trendicator.js';
      async function fetchGlucose() {
        try {
          const response = await fetch('/glucose');
          if (!response.ok) throw new Error('Network response was not ok');
          const data = await response.json();
          document.getElementById('output_glucose_indicator').innerHTML =
            getCGMTrendicator(data);
          document.getElementById('output_glucose_json').innerHTML =
            \`<pre>\${JSON.stringify(data, null, 2)}</pre>\`;
        } catch (error) {
          document.getElementById('output_glucose_json').innerHTML =
            \`<p>Error: \${error.message}</p>\`;
        }
      }
      fetchGlucose();
      setInterval(fetchGlucose, 60000);
    </script>
  </body>
</html>
"
`;
